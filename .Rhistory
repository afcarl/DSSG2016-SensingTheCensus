d <- dist(spec) # euclidean distances between the rows
fit <- cmdscale(d,eig=TRUE, k=2)
spec$sample <- raw_data$To.Show
spec$ID <- raw_data$ID
cluster <- cluster[order(cluster$ID),]
spec$cluster <- cluster$K7
spec$cluster <- as.factor(spec$cluster)
View(raw_data)
spec$sample <- raw_data$To.Show[260:3162,]
spec$sample <- raw_data$To.Show[260:3162]
spec$ID <- raw_data$ID[260:3162]
cluster <- cluster[order(cluster$ID),]
spec$cluster <- cluster$K7
spec$cluster <- as.factor(spec$cluster)
View(spec)
View(spec)
library(MASS)
raw_data <- read.csv("/Users/myeong/Dropbox/CellPhoneData/to_cluster_normalized_to_show.csv")
spec <- raw_data[raw_data$ID[260:3162],6:17]
cluster <- read.csv("/Users/myeong/git/cellphone/result/0210_clusters.csv")
d <- dist(spec) # euclidean distances between the rows
fit <- cmdscale(d,eig=TRUE, k=2)
spec$sample <- raw_data$To.Show[260:3162]
spec$ID <- raw_data$ID[260:3162]
cluster <- cluster[order(cluster$ID),]
spec$cluster <- cluster$K7
spec$cluster <- as.factor(spec$cluster)
for (i in 1:nrow(spec)){
spec$col[i] = "red"
spec$col[i] = "blue"
spec$col[i] = "mediumorchid1"
spec$col[i] = "orange"
spec$col[i] = "darkgreen"
spec$col[i] = "black"
spec$col[i] = "yellow"
}
} else if (spec$cluster[i] == 1){
} else if (spec$cluster[i] == 2){
} else if (spec$cluster[i] == 4){
} else if (spec$cluster[i] == 6){
if (spec$cluster[i] == 0){
} else if (spec$cluster[i] == 3){
}
} else if (spec$cluster[i] == 5){
source('~/.active-rstudio-document', echo=TRUE)
plot(x, y, xlab="", ylab="", main="MDS",  pch=19, type = "n", col=spec$col)
x <- fit$points[,1]
y <- fit$points[,2]
fit
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="", ylab="", main="MDS",  pch=19, type = "n", col=spec$col)
View(cluster)
View(spec)
View(spec)
View(raw_data)
fit$points
head(fit$points)
source('~/.active-rstudio-document', echo=TRUE)
plot(x, y, xlab="", ylab="", main="MDS",  pch=18, type = "n", col=spec$col)
plot(x, y, xlab="", ylab="", main="MDS",  pch=20, type = "n", col=spec$col)
x <- fit$points[,1]
x
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(MASS)
raw_data <- read.csv("/Users/myeong/Dropbox/CellPhoneData/to_cluster_normalized_to_show.csv")
spec <- raw_data[raw_data$ID[1276:1860],6:17]
d <- dist(spec) # euclidean distances between the rows
fit <- cmdscale(d,eig=TRUE, k=2)
spec$sample <- raw_data$To.Show[1276:1860]
spec$ID <- raw_data$ID[1276:1860]
cluster <- read.csv('year2/ids_count_1861.csv', header=FALSE, col.names=c("id","cl"))
cluster <- cluster[order(cluster$id),]
spec$cluster <- cluster$cl
spec$cluster <- as.factor(spec$cluster)
for (i in 1:nrow(spec)){
if (spec$cluster[i] == 0){
spec$col[i] = "red"
} else if (spec$cluster[i] == 1){
spec$col[i] = "blue"
} else if (spec$cluster[i] == 2){
spec$col[i] = "mediumorchid1"
} else if (spec$cluster[i] == 3){
spec$col[i] = "orange"
} else if (spec$cluster[i] == 4){
spec$col[i] = "darkgreen"
}
}
# plot solution
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="", ylab="", main="Clusters for the Window from April 2008 to March 2010",  pch=19, type = "n", col=spec$col)
text(x, y, labels = spec$sample, cex=.7, pos=2, col=spec$col)
View(spec)
for (i in 1:nrow(spec)){
if (spec$cluster[i] == 0){
spec$col[i] = "red"
} else if (spec$cluster[i] == 1){
spec$col[i] = "blue"
} else if (spec$cluster[i] == 2){
spec$col[i] = "mediumorchid1"
} else if (spec$cluster[i] == 3){
spec$col[i] = "orange"
} else if (spec$cluster[i] == 4){
spec$col[i] = "darkgreen"
}
}
View(spec)
cluster <- read.csv('year2/ids_count_1861.csv', header=FALSE, col.names=c("id","cl"))
cluster <- read.csv('/Users/myeong/Dropbox/CellPhoneData/result_new/year2/ids_count_1861.csv', header=FALSE, col.names=c("id","cl"))
cluster <- cluster[order(cluster$id),]
spec$cluster <- cluster$cl
spec$cluster <- as.factor(spec$cluster)
for (i in 1:nrow(spec)){
if (spec$cluster[i] == 0){
spec$col[i] = "red"
} else if (spec$cluster[i] == 1){
spec$col[i] = "blue"
} else if (spec$cluster[i] == 2){
spec$col[i] = "mediumorchid1"
} else if (spec$cluster[i] == 3){
spec$col[i] = "orange"
} else if (spec$cluster[i] == 4){
spec$col[i] = "darkgreen"
}
}
# plot solution
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="", ylab="", main="Clusters for the Window from April 2008 to March 2010",  pch=19, type = "n", col=spec$col)
text(x, y, labels = spec$sample, cex=.7, pos=2, col=spec$col)
points(x, y, type = "p", col=spec$col)
points(x, y, type = "p", col=spec$col, pch=21)
points(x, y, type = "p", col=spec$col, pch=19)
plot(x, y, xlab="", ylab="", main="Clusters for the Window from April 2008 to March 2010",  pch=19, type = "n", col=spec$col)
points(x, y, type = "p", col=spec$col, pch=19)
source('~/.active-rstudio-document', echo=TRUE)
spec$cluster <- cluster$K7
source('~/.active-rstudio-document', echo=TRUE)
for (i in 1:nrow(spec)){
if (spec$cluster[i] == 0){
spec$col[i] = "red"
} else if (spec$cluster[i] == 1){
spec$col[i] = "blue"
} else if (spec$cluster[i] == 2){
spec$col[i] = "mediumorchid1"
} else if (spec$cluster[i] == 3){
spec$col[i] = "orange"
} else if (spec$cluster[i] == 4){
spec$col[i] = "darkgreen"
} else if (spec$cluster[i] == 5){
spec$col[i] = "black"
} else if (spec$cluster[i] == 6){
spec$col[i] = "yellow"
}
}
# plot solution
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="", ylab="", main="MDS",  pch=19, type = "n", col=spec$col)
points(x, y, type = "p", col=spec$col, pch=19)
points(x, y, type = "p", col=spec$col, pch=18)
points(x, y, type = "p", col=spec$col, pch=21)
plot(x, y, xlab="", ylab="", main="MDS",  pch=19, type = "n", col=spec$col)
points(x, y, type = "p", col=spec$col, pch=21)
plot(x, y, xlab="", ylab="", main="MDS",  pch=19, type = "n", col=spec$col)
points(x, y, type = "p", col=spec$col, pch=18)
plot(x, y, xlab="", ylab="", main="MDS",  pch=19, type = "n", col=spec$col)
points(x, y, type = "p", col=spec$col, pch=17)
plot(x, y, xlab="", ylab="", main="MDS",  pch=19, type = "n", col=spec$col)
points(x, y, type = "p", col=spec$col, pch=20)
spec$cluster <- as.factor(spec$cluster)
for (i in 1:nrow(spec)){
if (spec$cluster[i] == 0){
spec$col[i] = "red"
} else if (spec$cluster[i] == 1){
spec$col[i] = "blue"
} else if (spec$cluster[i] == 2){
spec$col[i] = "mediumorchid1"
} else if (spec$cluster[i] == 3){
spec$col[i] = "orange"
} else if (spec$cluster[i] == 4){
spec$col[i] = "green"
} else if (spec$cluster[i] == 5){
spec$col[i] = "black"
} else if (spec$cluster[i] == 6){
spec$col[i] = "yellow"
}
}
# plot solution
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="", ylab="", main="MDS",  pch=19, type = "n", col=spec$col)
points(x, y, type = "p", col=spec$col, pch=20)
source('~/.active-rstudio-document', echo=TRUE)
text(x, y, labels = spec$sample, cex=.7, pos=2, col=spec$col)
View(spec)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(spec)
x <- 1:12
sample(x)
help(glm)
raw_data$Group.ID <- as.factor(raw_data$Group.ID)
raw_data <- read.csv("/Users/myeong/git/rsvp_collector/final.csv")
raw_data$Group.ID <- as.factor(raw_data$Group.ID)
for (group in levels(raw_data$Group.ID)){
print (group)
}
for (group in levels(raw_data$Group.ID)){
set <- raw_data[raw_data$Group.ID == group]
print (set)
}
raw_data$Group.ID <- as.factor(raw_data$Group.ID)
for (group in levels(raw_data$Group.ID)){
set <- raw_data[raw_data$Group.ID == group,]
print (set)
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
0
0
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
warnings()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
hist(groups)
d <- density(groups)
plot(d, main="Kernel Density of Alpha")
polygon(d, col="red", border="blue")
hist(groups)
hist(groups, breaks=50, col="red")
print (groups)
groups.ordered = sort(groups)
plot(groups.ordered, (1:n)/n, type = 's', ylim = c(0, 1), xlab = 'Alpha', ylab = '', main = 'CDF')
plot(groups.ordered, type = 's', ylim = c(0, 1), xlab = 'Alpha', ylab = '', main = 'CDF')
plot(groups.ordered, type = 's',  xlab = 'Alpha', ylab = '', main = 'CDF')
d <- density(groups)
plot(d, main="Kernel Density of Alpha")
polygon(d, col="red", border="blue")
print (groups)
hist(groups, breaks=50, col="red")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
hist(groups, breaks=50, col="red")
d <- density(groups)
plot(d, main="Kernel Density of Alpha")
polygon(d, col="red", border="blue")
groups.ordered = sort(groups)
plot(groups.ordered, type = 's',  xlab = 'Alpha', ylab = '', main = 'CDF')
groups.ordered = sort(groups)
plot(groups.ordered, type = 's',  xlab = 'Alpha', ylab = '', main = 'CDF')
print (groups)
hist(groups, breaks=50, col="red")
source('~/.active-rstudio-document', echo=TRUE)
hist(groups, breaks=50, col="red")
d <- density(groups)
plot(d, main="Kernel Density of Alpha")
polygon(d, col="red", border="blue")
print (groups)
hist(groups, breaks=50, col="red")
source('~/.active-rstudio-document', echo=TRUE)
print (groups)
hist(groups, breaks=50, col="red")
d <- density(groups)
plot(d, main="Kernel Density of Alpha")
polygon(d, col="red", border="blue")
groups.ordered = sort(groups)
plot(groups.ordered, type = 's',  xlab = 'Alpha', ylab = '', main = 'CDF')
plot.ecdf()
plot(groups.ordered, type = 's',  xlab = 'Alpha', ylab = '', main = 'CDF')
plot.ecdf()
plot.ecdf(groups)
plot(groups.ordered, type = 's',  xlab = 'Alpha', ylab = '', main = 'CDF')
plot.ecdf(groups)
source('~/.active-rstudio-document', echo=TRUE)
hist(groups, breaks=50, col="red")
d <- density(groups)
plot(d, main="Kernel Density of Alpha")
polygon(d, col="red", border="blue")
groups.ordered = sort(groups)
plot(groups.ordered, type = 's',  xlab = 'Alpha', ylab = '', main = 'CDF')
polygon(d, col="red", border="blue")
groups.ordered = sort(groups)
plot(groups.ordered, type = 's',  xlab = 'Alpha', ylab = '', main = 'CDF')
plot.ecdf(groups)
source('~/.active-rstudio-document', echo=TRUE)
plot(groups.ordered, type = 's',  xlab = 'Alpha', ylab = '', main = 'CDF')
plot(ecdf(vector), col=aCDFcolor, main=NA)
plot(ecdf(vector), col=aCDFcolor, main=NA)
aCDFcolor <- rgb(1,0,0)
groups.ordered = sort(groups)
plot(ecdf(vector), col=aCDFcolor, main=NA)
plot(ecdf(groups), col=aCDFcolor, main=NA)
plot(ecdf(groups), col=aCDFcolor, main=NA)
"
"
library("reshape2")
library("plyr")
library("ggplot2")
ggdata <- data.frame(groups)
# Melt the data frame
ggdata <- melt(ggdata)
ggdata <- melt(ggdata)
ggdata <- data.frame(groups)
# Melt the data frame
ggdata <- melt(ggdata)
ggdata <- ddply(ggdata, .(variable), transform, ecd=ecdf(value)(value))
cdf <- ggplot(ggdata, aes(x=value)) + stat_ecdf(aes(colour=variable))
cdf
source('~/.active-rstudio-document', echo=TRUE)
ggdata <- ddply(ggdata, .(variable), transform, ecd=ecdf(value)(value))
cdf <- ggplot(ggdata, aes(x=value)) + stat_ecdf(aes(colour=variable))
cdf
cdf <- ggplot(ggdata, aes(x=value)) + stat_ecdf(aes(colour=variable)) + geom_line()
cdf
ggdata <- ddply(ggdata, .(variable), transform, ecd=ecdf(value)(value))
cdf <- ggplot(ggdata, aes(x=value)) + stat_ecdf(aes(colour=variable)) + geom_line()
cdf
ggdata <- data.frame(x = c(groups, group2))
ggdata <- melt(ggdata)
ggdata <- ddply(ggdata, .(variable), transform, ecd=ecdf(value)(value))
cdf <- ggplot(ggdata, aes(x=value)) + stat_ecdf(aes(colour=variable)) + geom_line()
cdf
ggdata <- data.frame(x = c(groups, group2))
ggdata <- df[order(ggdata$x), ggg = factor(rep(1:3, c(nrow(groups),nrow(group2)))]
ggdata <- data.frame(x = c(groups, group2))
ggdata <- df[order(ggdata$x), ggg = factor(rep(1:3, c(nrow(groups),nrow(group2))))]
ggdata <- df[order(ggdata$x), ggg = factor(rep(1:2, c(nrow(groups),nrow(group2))))]
ggdata <- data.frame(x = c(groups, group2))
ggdata <- df[order(ggdata$x), ggg = factor(rep(1:2, c(nrow(groups),nrow(group2))))]
nrow(groups)
len(groups)
length(groups)
ggdata <- data.frame(x = c(groups, group2))
ggdata <- df[order(ggdata$x), ggg = factor(rep(1:2, c(length(groups),length(group2))))]
ggdata <- data.frame(x = c(groups, group2))
ggdata <- ggdata[order(ggdata$x), ggg = factor(rep(1:2, c(length(groups),length(group2))))]
source('~/.active-rstudio-document', echo=TRUE)
ggdata <- ggdata[order(ggdata$x)]
ggdata <- data.frame(x = c(groups, group2))
ggdata <- ggdata[order(ggdata$x)]
ggdata <- data.frame(x = c(groups, group2))
# Melt the data frame
ggdata <- melt(ggdata)
ggdata <- ddply(ggdata, .(variable), transform, ecd=ecdf(value)(value))
cdf <- ggplot(ggdata, aes(x=value)) + stat_ecdf(aes(colour=variable))
cdf
ggdata <- data.frame(x = c(groups, group2))
# Melt the data frame
ggdata <- melt(ggdata)
ggdata <- melt(ggdata)
ggdata <- ddply(ggdata, .(variable), transform, ecd=ecdf(value)(value))
cdf <- ggplot(ggdata, aes(x=value)) + stat_ecdf(aes(colour=variable)) + geom_line(aes(group = variable,colour = variable))
cdf
cdf <- ggplot(ggdata, aes(x=value)) + stat_ecdf(aes(colour=variable))
cdf
plot(ecdf(group2), col=aCDFcolor, main=NA)
plot.ecdf(group2)
plot(ecdf(groups), add=TRUE, col=2)
fit <- glm(formula = Probability ~ Num_Activated, family = quasinomial(link = "logit"), data = set)
install.packages("e1071")
install.packages("cwhmisc")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(ecdf(group2), col=aCDFcolor, main=NA, xlim=c(-5,4))
plot.ecdf(group2)
ggdata <- ddply(ggdata, .(variable), transform, ecd=ecdf(value)(value))
plot(ecdf(groups), add=TRUE, col=2, xlim=c(-5,4))
plot(ecdf(groups), add=TRUE, col=2, xlim=c(-5,4))
plot(ecdf(group2), col=aCDFcolor, main=NA, xlim=c(-5,4))
plot.ecdf(group2)
plot(ecdf(groups), add=TRUE, col=2, xlim=c(-5,4))
aCDFcolor <- rgb(1,0,0)
group2.ordered = sort(group2)
plot(ecdf(group2), col=aCDFcolor, main=NA, xlim=c(-5,4))
plot.ecdf(group2)
source('~/.active-rstudio-document', echo=TRUE)
plot(ecdf(group2), col=aCDFcolor, main=NA, xlim=c(-5,4))
plot.ecdf(group2)
plot(ecdf(groups), add=TRUE, col=2, xlim=c(-5,4))
plot(ecdf(group2), col=aCDFcolor, main=NA, xlim=c(-5,4))
plot.ecdf(group2)
plot(ecdf(group2), col=aCDFcolor, main=NA, xlim=c(-5,4))
plot.ecdf(group2)
plot(ecdf(groups), add=TRUE, col=black, xlim=c(-5,4))
plot(ecdf(groups), add=TRUE, col=black, xlim=c(-5,4))
black <- rgb(0,0,0)
plot(ecdf(group2), col=aCDFcolor, main=NA, xlim=c(-5,4))
plot.ecdf(group2)
plot(ecdf(groups), add=TRUE, col=black, xlim=c(-5,4))
library(readr)
install.packages("readr")
library(readr)
library(dplyr)
install.packages("dplyr")
install.packages("magrittr")
install.packages("lubridate")
install.packages("rgdal")
install.packages("raster")
library(readr)
library(dplyr)
library(magrittr)
library(lubridate)
library(rgdal)
library(raster)
census = readOGR("data/GeoJSON/milano_census_ace.geojson", "OGRGeoJSON") %>%
spTransform(CRS("+proj=utm +zone=32 +datum=WGS84"))
getwd()
setwd("/Users/myeong/git/DSSG/DSSG2016-SensingTheCensus/")
census = readOGR("data/GeoJSON/milano_census_ace.geojson", "OGRGeoJSON") %>%
spTransform(CRS("+proj=utm +zone=32 +datum=WGS84"))
cdr = readOGR("data/GeoJSON/CDR_join_output.geojson", "OGRGeoJSON") %>%
spTransform(CRS("+proj=utm +zone=32 +datum=WGS84"))
intersection = raster::intersect(x = census, y = cdr)
install.packages("rgeos")
intersection = raster::intersect(x = census, y = cdr)
view(intersection)
view(intersection@data)
view()
View(ggdata)
View(intersection)
View(intersection@data)
intersection = raster::intersect(x = census, y = cdr)
#' Calcualte area of each polygon
intersection@data$area = area(intersection)
View(intersection)
View(intersection@data)
head(intersection)
square_size = max(intersection@data$area)
sqare_size
square_size
square_size = min(intersection@data$area)
square_size
square_size = max(intersection@data$area)
View(cdr)
View(area(cdr))
glips
glimps
glimps()
glimp()
Glimps()
Glens()
View()
View(intersection@data)
help(read_delim)
help(filter)
help(left_join)
